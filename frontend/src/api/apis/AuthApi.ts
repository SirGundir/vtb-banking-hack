/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChangePasswordDTO,
  CreateUserDTO,
  HTTPValidationError,
  JwtTokensDTO,
  JwtTokensSchema,
  LoginDTO,
  OkResponseSchema,
  RefreshTokenDTO,
  ResetPasswordDTO,
  SetPasswordDTO,
} from '../models/index';
import {
    ChangePasswordDTOFromJSON,
    ChangePasswordDTOToJSON,
    CreateUserDTOFromJSON,
    CreateUserDTOToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    JwtTokensDTOFromJSON,
    JwtTokensDTOToJSON,
    JwtTokensSchemaFromJSON,
    JwtTokensSchemaToJSON,
    LoginDTOFromJSON,
    LoginDTOToJSON,
    OkResponseSchemaFromJSON,
    OkResponseSchemaToJSON,
    RefreshTokenDTOFromJSON,
    RefreshTokenDTOToJSON,
    ResetPasswordDTOFromJSON,
    ResetPasswordDTOToJSON,
    SetPasswordDTOFromJSON,
    SetPasswordDTOToJSON,
} from '../models/index';

export interface ChangePasswordApiV1AuthChangePasswordPostRequest {
    changePasswordDTO: ChangePasswordDTO;
}

export interface LoginApiV1AuthLoginPostRequest {
    loginDTO: LoginDTO;
}

export interface LogoutApiV1AuthLogoutPostRequest {
    jwtTokensDTO: JwtTokensDTO;
}

export interface RefreshApiV1AuthRefreshPostRequest {
    refreshTokenDTO: RefreshTokenDTO;
}

export interface ResetPasswordApiV1AuthResetFinishUidb64TokenPostRequest {
    uidb64: string;
    token: string;
    setPasswordDTO: SetPasswordDTO;
}

export interface SignupApiV1AuthSignupPostRequest {
    createUserDTO: CreateUserDTO;
}

export interface StartResetPasswordApiV1AuthResetStartPostRequest {
    resetPasswordDTO: ResetPasswordDTO;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Change Password
     */
    async changePasswordApiV1AuthChangePasswordPostRaw(requestParameters: ChangePasswordApiV1AuthChangePasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OkResponseSchema>> {
        if (requestParameters['changePasswordDTO'] == null) {
            throw new runtime.RequiredError(
                'changePasswordDTO',
                'Required parameter "changePasswordDTO" was null or undefined when calling changePasswordApiV1AuthChangePasswordPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/auth/change-password/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChangePasswordDTOToJSON(requestParameters['changePasswordDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OkResponseSchemaFromJSON(jsonValue));
    }

    /**
     * Change Password
     */
    async changePasswordApiV1AuthChangePasswordPost(requestParameters: ChangePasswordApiV1AuthChangePasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OkResponseSchema> {
        const response = await this.changePasswordApiV1AuthChangePasswordPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Login
     */
    async loginApiV1AuthLoginPostRaw(requestParameters: LoginApiV1AuthLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JwtTokensSchema>> {
        if (requestParameters['loginDTO'] == null) {
            throw new runtime.RequiredError(
                'loginDTO',
                'Required parameter "loginDTO" was null or undefined when calling loginApiV1AuthLoginPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/auth/login/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginDTOToJSON(requestParameters['loginDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JwtTokensSchemaFromJSON(jsonValue));
    }

    /**
     * Login
     */
    async loginApiV1AuthLoginPost(requestParameters: LoginApiV1AuthLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JwtTokensSchema> {
        const response = await this.loginApiV1AuthLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logout
     */
    async logoutApiV1AuthLogoutPostRaw(requestParameters: LogoutApiV1AuthLogoutPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OkResponseSchema>> {
        if (requestParameters['jwtTokensDTO'] == null) {
            throw new runtime.RequiredError(
                'jwtTokensDTO',
                'Required parameter "jwtTokensDTO" was null or undefined when calling logoutApiV1AuthLogoutPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/auth/logout/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JwtTokensDTOToJSON(requestParameters['jwtTokensDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OkResponseSchemaFromJSON(jsonValue));
    }

    /**
     * Logout
     */
    async logoutApiV1AuthLogoutPost(requestParameters: LogoutApiV1AuthLogoutPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OkResponseSchema> {
        const response = await this.logoutApiV1AuthLogoutPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Refresh
     */
    async refreshApiV1AuthRefreshPostRaw(requestParameters: RefreshApiV1AuthRefreshPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JwtTokensSchema>> {
        if (requestParameters['refreshTokenDTO'] == null) {
            throw new runtime.RequiredError(
                'refreshTokenDTO',
                'Required parameter "refreshTokenDTO" was null or undefined when calling refreshApiV1AuthRefreshPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/auth/refresh/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefreshTokenDTOToJSON(requestParameters['refreshTokenDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JwtTokensSchemaFromJSON(jsonValue));
    }

    /**
     * Refresh
     */
    async refreshApiV1AuthRefreshPost(requestParameters: RefreshApiV1AuthRefreshPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JwtTokensSchema> {
        const response = await this.refreshApiV1AuthRefreshPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reset Password
     */
    async resetPasswordApiV1AuthResetFinishUidb64TokenPostRaw(requestParameters: ResetPasswordApiV1AuthResetFinishUidb64TokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OkResponseSchema>> {
        if (requestParameters['uidb64'] == null) {
            throw new runtime.RequiredError(
                'uidb64',
                'Required parameter "uidb64" was null or undefined when calling resetPasswordApiV1AuthResetFinishUidb64TokenPost().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling resetPasswordApiV1AuthResetFinishUidb64TokenPost().'
            );
        }

        if (requestParameters['setPasswordDTO'] == null) {
            throw new runtime.RequiredError(
                'setPasswordDTO',
                'Required parameter "setPasswordDTO" was null or undefined when calling resetPasswordApiV1AuthResetFinishUidb64TokenPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/auth/reset/finish/{uidb64}/{token}/`;
        urlPath = urlPath.replace(`{${"uidb64"}}`, encodeURIComponent(String(requestParameters['uidb64'])));
        urlPath = urlPath.replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetPasswordDTOToJSON(requestParameters['setPasswordDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OkResponseSchemaFromJSON(jsonValue));
    }

    /**
     * Reset Password
     */
    async resetPasswordApiV1AuthResetFinishUidb64TokenPost(requestParameters: ResetPasswordApiV1AuthResetFinishUidb64TokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OkResponseSchema> {
        const response = await this.resetPasswordApiV1AuthResetFinishUidb64TokenPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Signup
     */
    async signupApiV1AuthSignupPostRaw(requestParameters: SignupApiV1AuthSignupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JwtTokensSchema>> {
        if (requestParameters['createUserDTO'] == null) {
            throw new runtime.RequiredError(
                'createUserDTO',
                'Required parameter "createUserDTO" was null or undefined when calling signupApiV1AuthSignupPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/auth/signup/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserDTOToJSON(requestParameters['createUserDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JwtTokensSchemaFromJSON(jsonValue));
    }

    /**
     * Signup
     */
    async signupApiV1AuthSignupPost(requestParameters: SignupApiV1AuthSignupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JwtTokensSchema> {
        const response = await this.signupApiV1AuthSignupPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Start Reset Password
     */
    async startResetPasswordApiV1AuthResetStartPostRaw(requestParameters: StartResetPasswordApiV1AuthResetStartPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OkResponseSchema>> {
        if (requestParameters['resetPasswordDTO'] == null) {
            throw new runtime.RequiredError(
                'resetPasswordDTO',
                'Required parameter "resetPasswordDTO" was null or undefined when calling startResetPasswordApiV1AuthResetStartPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/auth/reset/start/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetPasswordDTOToJSON(requestParameters['resetPasswordDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OkResponseSchemaFromJSON(jsonValue));
    }

    /**
     * Start Reset Password
     */
    async startResetPasswordApiV1AuthResetStartPost(requestParameters: StartResetPasswordApiV1AuthResetStartPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OkResponseSchema> {
        const response = await this.startResetPasswordApiV1AuthResetStartPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
